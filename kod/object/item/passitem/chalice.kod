// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Chalice is PassiveItem

constants:

   include blakston.khd


resources:

   include chalice.lkod

   chalice_name_rsc = "Chalice of the Rain"
   chalice_icon_rsc = chalice.bgf
   chalice_desc_rsc = \
      "This ornate chalice is adorned with holy markings "
      "of Shal'ille.  An inscription reads \"to catch her tears.\""
   chalice_cant_get = \
      "You try to pick up the chalice, but it mystically clings to "
      "the stone altar."
   chalice_append_hits = "\n\nThis chalice has %i %s remaining."
   chalice_append_plural = "charges"
   chalice_append_single = "charge"

   chalice_use = "You sip a bit of the water out of the Chalice of Rain."
   chalice_empty = "You sip the last bit of water from the Chalice of Rain."
   chalice_combine = "You pour the water from one Chalice into the other."
   chalice_cant_use_pkill = "Only innocents may partake of the chalice."

classvars:

   vrName = chalice_name_rsc
   vrIcon = chalice_icon_rsc
   vrDesc = chalice_desc_rsc

   viUse_type = ITEM_SINGLE_USE

   viBulk = 20
   viWeight = 20
   viHits_init_min = 3
   viHits_init_max = 5
   viValue_average = 500

properties:

messages:

   CanBeGivenToNPC()
   "NPCs will refuse to take this item if offered to them."
   {
      return FALSE;
   }

   ReqNewOwner(what=$)
   {
      if poOwner = Send(SYS,@FindRoomByNum,#num=RID_CAVE2)
         AND Send(self,@GetRow) = 23 AND Send(self,@GetCol) = 11
         AND NOT Send(poOwner,@OkayToGetChalice)
      {
         Send(what,@MsgSendUser,#message_rsc=chalice_cant_get);

         return FALSE;
      }

      return TRUE;
   }

   NewOwner(what = $)
   {
      local oOtherChalice;

      if what = $
      {
         propagate;
      }

      // If we drop it in a room with a high Shal'ille bonus, refill the chalice
      if IsClass(what,&Room)
         AND Send(what,@GetShalilleBonus) > 20
      {
         piHits = piHits_init;
      }

      // If a user already has a chalice, then "combine" them.
      if IsClass(what,&User)
      {
         // Get the second chalice in sequence.  This is the one the
         // user was originally holding, if any.

         oOtherChalice = Send(what,@FindHolding,#class=&Chalice,#sequence=2);

         if oOtherChalice <> $
            AND NOT (IsClass(what,&DM) AND Send(what,@PlayerIsImmortal))
         {
            Send(what,@MsgSendUser,#message_rsc=chalice_combine);
            Send(oOtherChalice,@SetHits,#number=Send(oOtherChalice,@GetHits) + piHits);
            Post(self,@Delete);
         }
      }

      propagate;
   }

   DestroyDisposable()
   {
      if poOwner = Send(SYS,@FindRoomByNum,#num=RID_CAVE2)
      {
         return FALSE;
      }

      propagate;
   }

   ReqNewApply(what = $, apply_on = $)
   {
      if (IsClass(what,&User))
      {
         // Prevent use if you're red.  This is because player killers
         // were using this to escape too easily after kills.
         if Send(what,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
            OR Send(what,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
         {
            Send(what, @MsgSendUser, #message_rsc = chalice_cant_use_pkill);

            return FALSE;
         }

         // Prevent use if you can't fight.
         if Send(what,@CheckPlayerFlag,#flag=PFLAG_NO_FIGHT)
         {
            return FALSE;
         }
      }

      return TRUE;
   }

   NewApplied(what = $, apply_on = $)
   {
      local oRescue;

      if --piHits > 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=chalice_use);
      }
      else
      {
         Send(poOwner,@MsgSendUser,#message_rsc=chalice_empty);

         Post(self,@Delete);
      }

      // Cast Rescue at really low power.
      oRescue = Send(SYS,@FindSpellByNum,#num=SID_RESCUE);
      Send(oRescue,@CastSpell,#who=apply_on,#iSpellPower=1,#bItemCast=TRUE);

      return;
   }

   SetHits(number = $)
   {
      if (number = $)
      {
         return;
      }

      piHits = number;

      if piHits > piHits_init
      {
         piHits = piHits_init;
      }

      return;
   }

   CanBeStoredInVault()
   {
      return FALSE;
   }

   AppendDesc()
   {
      if (piHits > 1)
      {
         AddPacket(4,chalice_append_hits, 4,piHits, 4,chalice_append_plural);
      }
      else if (piHits = 1)
      {
         AddPacket(4,chalice_append_hits, 4,piHits, 4,chalice_append_single);
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
