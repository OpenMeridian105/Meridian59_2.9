// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
GuildShield is Shield

constants:

   include blakston.khd

   DEFENDING = 3

resources:

   include guilshld.lkod

   guildshield_name_rsc = "herald shield"

   guildshield_base_sash = gshA.bgf
   guildshield_base_halvesv = gshB.bgf
   guildshield_base_stripeh = gshC.bgf
   guildshield_base_checker = gshD.bgf
   guildshield_pov_sash = povgshA.bgf
   guildshield_pov_halvesv = povgshB.bgf
   guildshield_pov_stripeh = povgshC.bgf
   guildshield_pov_checker = povgshD.bgf
   guildshield_duke = gshda.bgf
   guildshield_duke_over = gshdaov.bgf
   guildshield_old_duke = gshdu.bgf
   guildshield_old_duke_over = gshduov.bgf
   guildshield_princess = gshpr.bgf
   guildshield_princess_over = gshprov.bgf
   guildshield_rebel = gshre.bgf
   guildshield_rebel_over = gshreov.bgf
   guildshield_riija = gshri.bgf
   guildshield_riija_over = gshriov.bgf
   guildshield_faren = gshfa.bgf
   guildshield_faren_over = gshfaov.bgf
   guildshield_qor = gshqo.bgf
   guildshield_qor_over = gshqoov.bgf
   guildshield_shalille = gshsh.bgf
   guildshield_shalille_over = gshshov.bgf
   guildshield_kraanan = gshkr.bgf
   guildshield_kraanan_over = gshkrov.bgf
   guildshield_jala = gshja.bgf
   guildshield_jala_over = gshjaov.bgf
   guildshield_qormas = gshqm.bgf
   guildshield_qormas_over = gshqmov.bgf
   guildshield_window_overlay_rsc = povshldE.bgf
   guildshield_desc_rsc = \
      "Heavy metal shields of this style are decorated in the standards "
      "of its owner guild.  "
   guildshield_herald_guild_master = \
      "The pattern on this shield is %s%s%s: the mark of the %q.  %s"
   guildshield_herald_noguild_master = \
      "The pattern on this shield is %s%s%s.  %s"
   guildshield_red = "rose"
   guildshield_skin1 = "sand"
   guildshield_skin2 = "bronze"
   guildshield_skin4 = "ochre"
   guildshield_orange = "gold"
   guildshield_green = "verdant"
   guildshield_blue = "navy"
   guildshield_purple = "violet"
   guildshield_yellow = "gold"
   guildshield_gray = "gris"
   guildshield_sky = "azure"
   guildshield_darkgray = "silver"
   guildshield_black = "ebony"
   guildshield_darkgreen = "forest green"
   guildshield_unknown = "a color"
   guildshield_slash = " tierced in bend sinister by "
   guildshield_half = " astride "
   guildshield_horiz = " tierced in feld by "
   guildshield_checker = " quartered with "
   guildshield_insig_riija = "The unblinking eye of Riija stares from its center. "
   guildshield_insig_qor = "The skull insignia of Qor is upon it. "
   guildshield_insig_kraanan = "The weapons of Kraanan are crossed acenter. "
   guildshield_insig_faren = "The power of Faren arcs across it. "
   guildshield_insig_jala = "The lute of Jala is depicted upon it. "
   guildshield_insig_princess = "It is emblazoned with the Royal Crown of Kateriina. "
   guildshield_insig_old_duke = "The bold seal of Kalior is affixed. "
   guildshield_insig_duke = "The bold seal of Akardius is affixed. "
   guildshield_insig_shalille = "The ankh of Shal'ille's blessing is afaced. "
   guildshield_insig_rebel = "The rebel flag of Jonas is displayed proudly. "
   guildshield_insig_qormas = "This shield is decorated with a festive reath for Qormas. "
   guildshield_insig_none = ""

classvars:

   vrName = guildshield_name_rsc

   viHits_init_min = 350
   viHits_init_max = 400

   // Being custom and made from ore, it's heavier than your average shield.
   viValue_average = 400
   viWeight = 200
   viBulk = 150

   viDefense_base = 20
   viDamage_base = 2

properties:

   vrDesc = guildshield_desc_rsc
   vrIcon = guildshield_base_sash
   vrShield_overlay = guildshield_base_sash
   prShield_emblem_held = $
   prShield_emblem_drop = $
   vrShield_window_overlay = guildshield_window_overlay_rsc
   piInsigniaType = INSIG_NONE

   viGround_group = 3
   viInventory_group = 1
   viBroken_group = 4

   piShield_shape = SHIELDSHAPE_DEFAULT

messages:

   Constructor(color1=XLAT_TO_GRAY,color2=XLAT_TO_GRAY,
               shape=SHIELDSHAPE_DEFAULT,guildMember=$)
   {
      local oGuild;

      if guildMember <> $
      {
         oGuild = Send(guildMember,@GetGuild);
         color1 = Send(oGuild,@GetPrimaryGuildColor);
         color2 = Send(oGuild,@GetSecondaryGuildColor);
         shape  = Send(oGuild,@GetShieldShape);
      }

      Send(self,@ChangeGuildShieldColor,#color1=color1,#color2=color2,
            #shape=shape,#override=TRUE);

      propagate;
   }

   HasInsignia()
   {
      if piInsigniaType >= INSIG_MINIMUM
         AND piInsigniaType <= INSIG_MAXIMUM
      {
         return TRUE;
      }

      return FALSE;
   }

   IsShieldColored()
   {
      local XLAT;
      XLAT = Send(self,@GetPaletteTranslation);

      if (Send(SYS,@DecodePrimaryColor,#xlat=XLAT) = XLAT_TO_GRAY)
         AND (Send(SYS,@DecodeSecondaryColor,#xlat=XLAT) = XLAT_TO_GRAY)
      {
         return FALSE;
      }

      return TRUE;
   }

   AppendColor(color=0,iColorNum=1)
   {
      if color = XLAT_TO_RED { AddPacket(4,guildshield_red); return; }
      if color = XLAT_TO_SKIN1 { AddPacket(4,guildshield_skin1); return; }
      if color = XLAT_TO_SKIN2 { AddPacket(4,guildshield_skin2); return; }
      if color = XLAT_TO_SKIN4 { AddPacket(4,guildshield_skin4); return; }
      if color = XLAT_TO_ORANGE { AddPacket(4,guildshield_orange); return; }
      if color = XLAT_TO_GREEN { AddPacket(4,guildshield_green); return; }
      if color = XLAT_TO_BLUE { AddPacket(4,guildshield_blue); return; }
      if color = XLAT_TO_PURPLE { AddPacket(4,guildshield_purple); return; }
      if color = XLAT_TO_YELLOW { AddPacket(4,guildshield_yellow); return; }
      if color = XLAT_TO_GRAY { AddPacket(4,guildshield_gray); return; }
      if color = XLAT_TO_SKY { AddPacket(4,guildshield_sky); return; }
      if color = XLAT_TO_BLACK { AddPacket(4,guildshield_darkgray); return; }
      if color = XLAT_TO_DGREEN { AddPacket(4,guildshield_darkgreen); return; }

      if color = XLAT_REDTOBLACK
      {
         if iColorNum = 1
         {
            AddPacket(4,guildshield_black);
         }
         else
         {
            AddPacket(4,guildshield_blue);
         }

         return;
      }
      if color = XLAT_BLUETOBLACK
      {
         if iColorNum = 1
         {
            AddPacket(4,guildshield_blue);
         }
         else
         {
            AddPacket(4,guildshield_black);
         }

         return;
      }

      // Secondary skin colors return earlier.
      if color >= PT_REDTODKBLACK1
         AND color <= PT_REDTODKBLACK3
      {
         AddPacket(4,guildshield_black);

         return;
      }

      if color = PT_REDBLK_BLWHT
      {
         if iColorNum = 1
         {
            AddPacket(4,guildshield_black);
         }
         else
         {
            AddPacket(4,guildshield_gray);
         }

         return;
      }

      if color = PT_BLBLK_REDWHT
      {
         if iColorNum = 1
         {
            AddPacket(4,guildshield_gray);
         }
         else
         {
            AddPacket(4,guildshield_black);
         }

         return;
      }

      AddPacket(4,guildshield_unknown);

      return;
   }

   AppendDesc()
   {
      local iColor1, iColor2, iTranslation, oGuild, bGuild;

      // sample: "The pattern on this shield is rose astride gold;
      //          the traditional mark of the Foobars.  The eye of
      //          Riija is staring ahead."

      // Color 1
      iTranslation = Send(self,@GetPaletteTranslation);
      iColor1 = Send(SYS,@DecodePrimaryColor,#xlat=iTranslation);
      // Color 2
      iColor2 = Send(SYS,@DecodeSecondaryColor,#xlat=iTranslation);

      // Pick main resource based on whether guild added or not.
      oGuild = Send(SYS,@FindGuildByShield,#color1=iColor1,#color2=iColor2,
                     #shape=piShield_shape);
      if oGuild <> $
         AND IsClass(oGuild,&Guild)
         AND NOT Send(oGuild,@IsSecret)
      {
         AddPacket(4,guildshield_herald_guild_master);
         bGuild = TRUE;
      }
      else
      {
         AddPacket(4,guildshield_herald_noguild_master);
         bGuild = FALSE;
      }

      // Add first color.
      Send(self,@AppendColor,#color=iColor1,#iColorNum=1);
      // Add shape.
      if piShield_shape = SHIELDSHAPE_SLASH { AddPacket(4,guildshield_slash); }
      else if piShield_shape = SHIELDSHAPE_HALF { AddPacket(4,guildshield_half); }
      else if piShield_shape = SHIELDSHAPE_HORIZ { AddPacket(4,guildshield_horiz); }
      else { AddPacket(4,guildshield_checker); }
      // Add second color.
      Send(self,@AppendColor,#color=iColor2,#iColorNum=2);

      // Add guild name now if we have one.
      if bGuild
      {
         AddPacket(6,Send(oGuild,@GetName));
      }

      // Insignia, if any.
      if piInsigniaType = INSIG_RIIJA { AddPacket(4,guildshield_insig_riija); }
      else if piInsigniaType = INSIG_QOR { AddPacket(4,guildshield_insig_qor); }
      else if piInsigniaType = INSIG_KRAANAN { AddPacket(4,guildshield_insig_kraanan); }
      else if piInsigniaType = INSIG_FAREN { AddPacket(4,guildshield_insig_faren); }
      else if piInsigniaType = INSIG_JALA { AddPacket(4,guildshield_insig_jala); }
      else if piInsigniaType = INSIG_PRINCESS { AddPacket(4,guildshield_insig_princess); }
      else if piInsigniaType = INSIG_DUKE { AddPacket(4,guildshield_insig_duke); }
      else if piInsigniaType = INSIG_SHALILLE { AddPacket(4,guildshield_insig_shalille); }
      else if piInsigniaType = INSIG_REBEL { AddPacket(4, guildshield_insig_rebel); }
      else if piInsigniaType = INSIG_KALIOR { AddPacket(4, guildshield_insig_old_duke); }
      else if piInsigniaType = INSIG_QORMAS { AddPacket(4, guildshield_insig_qormas); }
      else { AddPacket(4,guildshield_insig_none); }

      return;
   }

   Randomize()
   "Admin supported."
   {
      local color1, color2, lNewColors, shape, insignia;

      if Random(1,10) = 1
      {
         lNewColors = [PT_REDTODGREEN1, PT_REDTODGREEN2, PT_REDTODGREEN3,
                       PT_REDTOBLACK1, PT_REDTOBLACK2, PT_REDTOBLACK3,
                       PT_REDTODKBLACK1, PT_REDTODKBLACK2, PT_REDTODKBLACK3,
                       PT_REDBLK_BLWHT, PT_BLBLK_REDWHT, XLAT_REDTOBLACK,
                       XLAT_BLUETOBLACK];
         color1 = Nth(lNewColors,Random(1,Length(lNewColors)));
         color2 = 0;
      }
      else
      {
         color1 = Random(XLAT_TO_RED, XLAT_TO_SKY);
         color2 = Random(XLAT_TO_RED, XLAT_TO_SKY);
      }

      shape = Random(SHIELDSHAPE_SLASH, SHIELDSHAPE_CHECKER);
      insignia = Random(INSIG_NONE, INSIG_REBEL);

      Send(self,@ChangeGuildShieldColor,#color1=color1,#color2=color2,
            #shape=shape,#override=TRUE);
      Send(self,@ChangeGuildInsignia,#insignia=insignia);

      return;
   }

   ChangeGuildInsignia(insignia=0)
   {
      prShield_emblem_held = $;
      prShield_emblem_drop = $;


      if insignia = INSIG_RIIJA
      {
         prShield_emblem_held = guildshield_riija_over;
         prShield_emblem_drop = guildshield_riija;
      }
      else if insignia = INSIG_QOR
      {
         prShield_emblem_held = guildshield_qor_over;
         prShield_emblem_drop = guildshield_qor;
      }
      else if insignia = INSIG_KRAANAN
      {
         prShield_emblem_held = guildshield_kraanan_over;
         prShield_emblem_drop = guildshield_kraanan;
      }
      else if insignia = INSIG_FAREN
      {
         prShield_emblem_held = guildshield_faren_over;
         prShield_emblem_drop = guildshield_faren;
      }
      else if insignia = INSIG_JALA
      {
         prShield_emblem_held = guildshield_jala_over;
         prShield_emblem_drop = guildshield_jala;
      }
      else if insignia = INSIG_PRINCESS
      {
         prShield_emblem_held = guildshield_princess_over;
         prShield_emblem_drop = guildshield_princess;
      }
      else if insignia = INSIG_DUKE
      {
         prShield_emblem_held = guildshield_duke_over;
         prShield_emblem_drop = guildshield_duke;
      }
      else if insignia = INSIG_SHALILLE
      {
         prShield_emblem_held = guildshield_shalille_over;
         prShield_emblem_drop = guildshield_shalille;
      }
      else if insignia = INSIG_REBEL
      {
         prShield_emblem_held = guildshield_rebel_over;
         prShield_emblem_drop = guildshield_rebel;
      }
      else if insignia = INSIG_KALIOR
      {
         prShield_emblem_held = guildshield_old_duke_over;
         prShield_emblem_drop = guildshield_old_duke;
      }
      else if insignia = INSIG_QORMAS
      {
         prShield_emblem_held = guildshield_qormas_over;
         prShield_emblem_drop = guildshield_qormas;
      }

      piInsigniaType = insignia;

      if poOwner <> $
      {
         Post(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   ChangeGuildShieldColor(color1=XLAT_TO_GRAY,color2=XLAT_TO_GRAY,
                           shape=SHIELDSHAPE_DEFAULT,override=FALSE)
   {
      local XLAT;

      // Override means do it no matter what.  Good for testing.

      if NOT override AND Send(self,@IsShieldColored)
      {
         return FALSE;
      }

      if color1 > XLAT_HIGH_VALUE
         AND NOT ((color1 >= PT_REDTODGREEN1 AND color1 <= PT_BLBLK_REDWHT)
            OR color1 = XLAT_REDTOBLACK
            OR color1 = XLAT_BLUETOBLACK)
      {
         Debug("Incorrect color1 passed to ChangeGuildShieldColor!",
               "color1 = ",color1," color2 = ",color2);
         color1 = XLAT_TO_SKIN1;
      }

      if color2 > XLAT_HIGH_VALUE
      {
         Debug("Incorrect color2 passed to ChangeGuildShieldColor!",
               "color1 = ",color1," color2 = ",color2);
         if color2 = XLAT_TO_DGREEN
         {
            color2 = XLAT_TO_GREEN;
         }

         if color2 = XLAT_TO_BLACK
         {
            color2 = XLAT_TO_GRAY;
         }
      }

      XLAT = Send(SYS,@EncodeTwoColorXLAT,#color1=color1,#color2=color2);
      Send(self,@SetPaletteTranslation,#translation=XLAT);
      piShield_shape = shape;

      if piShield_shape = SHIELDSHAPE_SLASH
      {
         vrIcon = guildshield_base_sash; 
         vrShield_overlay = guildshield_base_sash;
         vrShield_window_overlay = guildshield_pov_sash;
      }

      if piShield_shape = SHIELDSHAPE_HALF
      {
         vrIcon = guildshield_base_halvesv; 
         vrShield_overlay = guildshield_base_halvesv;
         vrShield_window_overlay = guildshield_pov_halvesv;
      }

      if piShield_shape = SHIELDSHAPE_HORIZ
      {
         vrIcon = guildshield_base_stripeh; 
         vrShield_overlay = guildshield_base_stripeh;
         vrShield_window_overlay = guildshield_pov_stripeh;
      }

      if piShield_shape = SHIELDSHAPE_CHECKER
      {
         vrIcon = guildshield_base_checker; 
         vrShield_overlay = guildshield_base_checker;
         vrShield_window_overlay = guildshield_pov_checker;
      }

      /// redraw it if necessary
      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   GetNumberOverlays()
   {
      if prShield_emblem_held <> $
      {
         return 2;
      }

      return 1;
   }

   GetOverlay()
   {
      return vrShield_overlay;
   }

   GetOverlayHotspot()
   {
      return HS_LEFT_WEAPON;
   }

   SendOverlayInformation(iAnimation=$)
   {
      AddPacket(4,vrShield_Overlay, 1,HS_LEFT_WEAPON);
      Send(self,@SendHeldAnimation,#iAnimation=iAnimation);

      if prShield_emblem_held <> $
      {
         AddPacket(4,prShield_emblem_held, 1,HS_LEFT_WEAPON,
                   1,ANIMATE_NONE, 2,1);
      }

      return;
   }

   SendHeldAnimation()
   {
      local XLAT;

      XLAT = Send(self,@GetPaletteTranslation);
      AddPacket(1,ANIMATE_TRANSLATION, 1,XLAT, 1,ANIMATE_NONE, 2,2);

      return;
   }

   SendAnimation()
   {
      local XLAT;

      XLAT = Send(self,@GetPaletteTranslation);
      AddPacket(1,ANIMATE_TRANSLATION,1,XLAT);

      if piHits > 0
      {
         AddPacket(1,ANIMATE_NONE,2,viGround_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,viBroken_group);
      }

      return;
   }

   SendWindowOverlayAnimation()
   {
      local XLAT;

      XLAT = Send(self,@GetPaletteTranslation);
      AddPacket(1,ANIMATE_TRANSLATION,1,XLAT);

      if piUsed = DEFENDING
      {
         AddPacket(1,ANIMATE_ONCE,4,1000,2,2,2,2,2,1);

         return;
      }

      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   SendOverlays()
   {
      if prShield_emblem_held <> $
         AND prShield_emblem_drop <> $
      {
         AddPacket(1,1, 4,prShield_emblem_drop, 1,1, 1,ANIMATE_NONE, 2,2);
      }
      else
      {
         AddPacket(1,0);
      }

      return;
   }

   SendLookAnimation()
   {
      local XLAT;

      XLAT = Send(self,@GetPaletteTranslation);
      AddPacket(1,ANIMATE_TRANSLATION,1,XLAT);

      if piHits > 0
      {
         AddPacket(1,ANIMATE_NONE,2,viInventory_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,viBroken_group);
      }

      return;
   }

   SendLookOverlays()
   {
      if prShield_emblem_held <> $
         AND prShield_emblem_drop <> $
      {
         AddPacket(1,1, 4,prShield_emblem_drop, 1,1, 1,ANIMATE_NONE, 2,1);
      }
      else
      {
         AddPacket(1,0);
      }

      return;
   }

   SendInventoryAnimation()
   {
      Send(self,@SendLookAnimation);

      return;
   }

   SendInventoryOverlays()
   {
      Send(self,@SendLookOverlays);

      return;
   }

   GetResistanceModifiers()
   {
      return [ [ATK_TYPE_PIERCE,10] ];
   }

   GetHeatDamage()
   {
      return 2;
   }

   GetBaseSpellModifier(oSpell=$)
   {
      local iSchool;

      if oSpell = $ OR piInsigniaType = INSIG_NONE
      {
         return 0;
      }

      iSchool = Send(oSpell,@GetSchool);

      // Give a bonus to certain spells if the shield has the proper insignia
      if (piInsigniaType = INSIG_FAREN AND iSchool = SS_FAREN)
         OR (piInsigniaType = INSIG_KRAANAN AND iSchool = SS_KRAANAN)
         OR (piInsigniaType = INSIG_QOR AND iSchool = SS_QOR)
         OR (piInsigniaType = INSIG_SHALILLE AND iSchool = SS_SHALILLE)
         OR (piInsigniaType = INSIG_RIIJA AND iSchool = SS_RIIJA)
         OR (piInsigniaType = INSIG_JALA AND iSchool = SS_JALA)
      {
         return 10;
      }

      // Allow faction insignias to give a small random bonus.
      if piInsigniaType = INSIG_DUKE
         OR piInsigniaType = INSIG_PRINCESS
         OR piInsigniaType = INSIG_REBEL
         OR piInsigniaType = INSIG_KALIOR
      {
         return Random(3,7);
      }

      if piInsigniaType = INSIG_QORMAS
      {
         return 10;
      }
      
      return 0;
   }

   UpdateFixInsignia()
   "Update 2.9, INSIG_NONE changes from 10 to 0."
   {
      if (piInsigniaType = 10)
      {
         piInsigniaType = 0;
      }

      return;
   }
   
   SetQormas()
   {
      Send(self,@ChangeGuildShieldColor,#color1=XLAT_TO_GREEN,#color2=XLAT_TO_RED,#override=TRUE);
      Send(self,@ChangeGuildInsignia,#insignia=INSIG_QORMAS);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
