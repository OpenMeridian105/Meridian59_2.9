// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RatCave2 is ObjectRoom

constants:

   include blakston.khd

   DOOR1SECTOR = 1
   DOOR2SECTOR = 2

   TREASURE_OBJECT = 1
   TREASURE_SPECIAL = 2
   TREASURE_POWER = 3

resources:

   include ratcave2.lkod

   room_ratcave2 = ratcave2.roo
   room_name_ratcave2 = "Abandoned Outpost"

   ratcave2_music = Creep.ogg
   RatKingLair_door_sound = down2.ogg
   
   RatKingLair_lever_desc = \
      "This lever is caked with years' worth of accumulated rust and slime."

   ratlair_book_name = "Old Book"
   ratlair_book_text = \
      "Year 473, Day 27\n"
      "\n"
      "The cave system we discovered while building the new guard tower appears to "
      "reach just beneath Tos. King Far'Nohl ordered us to immediately set up a supply "
      "route and charged me with overseeing it. Tos will not fall to the orcs.\n"
      "\n"
      "\n"
      "Year 473, Day 48\n"
      "\n"
      "Construction of the checkpoint is progressing nicely. The men discovered "
      "multiple side tunnels, greatly reducing the area we need to excavate.\n"
      "\n"
      "\n"
      "Year 473, Day 81\n"
      "\n"
      "Tos is holding out, thanks to the ever increasing stream of supplies passing "
      "through these caves every day. It appears that smugglers are making use of "
      "the many tunnels as well; some of the men have reported hearing noises from "
      "behind the walls.\n"
      "\n"
      "\n"
      "Year 473, Day 86\n"
      "\n"
      "We broke through some of the walls today and found something strange. No sign "
      "of smugglers. The tunnels there are too small for humans or orcs, but what else "
      "could it be? I can hear the noises now, too. A scratching at the walls, coming "
      "from all directions."

classvars:

   vrName = room_name_ratcave2

   viTeleport_row = 47
   viTeleport_col = 63

   viTerrain_type = TERRAIN_CAVES

properties:

   prRoom = room_ratcave2
   piRoom_num = RID_RATCAVE2

   prMusic = ratcave2_music

   piBaseLight = LIGHT_VERY_DARK

   piOutside_factor = 0

   piInit_count_min = 5
   piInit_count_max = 7

   piMonster_count_max = 12

   piMinionsKilled = 0

   poLever = $
   poChest = $

   // Timer for opening the entrance after it has been blocked by switching the lever
   ptDoor1 = $
   // Timer for closing the treasure room gate
   ptDoor2 = $
   plTreasuresList = $

messages:

   CreateStandardExits()
   {
      plEdge_Exits = $;

      plEdge_Exits = Cons([LEAVE_SOUTH, RID_RATCAVE1, 2, 38, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_NORTH, RID_RATCAVE3, 80, 11, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   Constructed()
   {
      plMonsters = [ [&GiantRatSoldier, 100] ];

      Send(self,@ResetTreasureList);

      if poChest = $
      {
         poChest = Create(&WoodenBox,#bLocked=TRUE);
         Send(self,@NewHold,#what=poChest,#new_row=62,#new_col=13,#fine_row=32,
               #fine_col=0,#angle=ANGLE_EAST);
      }

      propagate;
   }

   SetMonsterGenPoints()
   {
      plGenerators = [ [43, 54], [50, 50], [44, 50], [52, 44], [52, 40],
                       [50, 35], [44, 55] ];

      return;
   }

   CreateStandardObjects()
   {
      local oBook;

      poLever = Create(&Lever,#description=RatKingLair_lever_desc);

      Send(self,@NewHold,#what=poLever,#new_row=48,#new_col=18,
           #fine_row=00,#fine_col=00);

      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_WHITE,#iIntensity=40),
           #new_row=62,#new_col=13,#fine_row=32,#fine_col=00);

      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=67,#new_col=14,#fine_row=40,#fine_col=32);

      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=67,#new_col=11,#fine_row=40,#fine_col=32);

      Send(self,@NewHold,#what=Create(&QuillPen),
           #new_row=62,#new_col=16,#fine_row=48,#fine_col=40);

      Send(self,@NewHold,#what=Create(&Skull),
           #new_row=48,#new_col=10,#fine_row=48,#fine_col=00,#angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_BARREL2),
           #new_row=57,#new_col=9,#fine_row=48,#fine_col=16,#new_angle=ANGLE_EAST);

      oBook = Create(&BookPedestal,#Name=ratlair_book_name,#Text=ratlair_book_text);

      Send(self,@NewHold,#what=oBook,#new_row=64,#new_col=16,#fine_row=0,
            #fine_col=0,#new_angle=ANGLE_WEST);

      propagate;
   }

   SomethingChanged(what=$)
   {
      local i, oObj;

      if what = poLever
         AND Send(poLever,@GetState) = LEVER_DOWN
      {
         Send(poLever,@SetStuck,#newstuck=TRUE);
         Send(poChest,@LockChest,#bLocked=TRUE);

         // Lock players in the room
         Send(self,@SetSector,#sector=DOOR1SECTOR,#animation=ANIMATE_FLOOR_LIFT,
              #height=728,#speed=32);

         if ptDoor1 = $
         {
            // Front door opens on its own after a while in case
            // players leave the arena by other means
            ptDoor1 = CreateTimer(self,@OpenDoor,60000);
         }

         Send(self,@SomethingWaveRoom,#wave_rsc=RatKingLair_door_sound,
               #what=poLever);

         foreach i in plActive
         {
            oObj = First(i);
            if IsClass(oObj,&DuskRat)
               OR IsClass(oObj,&GiantRatKing)
            {
               Send(oObj,@Delete);
            }
         }

         // Spawn boss and minions
         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=42,#new_col=13,#fine_row=0,#fine_col=0);
         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=51,#new_col=25,#fine_row=0,#fine_col=0);
         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=43,#new_col=23,#fine_row=0,#fine_col=0);

         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=44,#new_col=15,#fine_row=0,#fine_col=0);
         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=42,#new_col=19,#fine_row=0,#fine_col=0);
         Send(self,@NewHold,#what=Create(&DuskRat),
              #new_row=52,#new_col=19,#fine_row=0,#fine_col=0);

         Send(self,@NewHold,#what=Create(&GiantRatKing),
              #new_row=48,#new_col=10,#fine_row=0,#fine_col=0);
      }

      propagate;
   }

   SomethingKilled(what = $,victim = $)
   {
      local cClass;

      if what <> $
         AND IsClass(what,&Player)
      {
         cClass = GetClass(victim);

         if (cClass = &DuskRat)
         {
            ++piMinionsKilled;
         }
         else if (cClass = &GiantRatKing)
         {
            // Unlock treasure room and chest for a while after defeating the boss
            Send(self,@SetSector,#sector=DOOR2SECTOR,#height=632,#speed=16,
                  #animation=ANIMATE_FLOOR_LIFT);
            if ptDoor1 <> $
            {
               DeleteTimer(ptDoor1);
               ptDoor1 = CreateTimer(self,@OpenDoor,5000);
            }

            ptDoor2 = CreateTimer(self,@CloseDoor,30000);
            Send(self,@DoTreasure);
            Send(poChest,@LockChest,#bLocked=FALSE);
            Send(self,@SomethingWaveRoom,#wave_rsc=RatKingLair_door_sound,
                  #what=poLever);
         }
      }

      propagate;
   }

   Delete()
   {
      if ptDoor1 <> $
      {
         DeleteTimer(ptDoor1);
         ptDoor1 = $;
      }

      if ptDoor2 <> $
      {
         DeleteTimer(ptDoor2);
         ptDoor2 = $;
      }

      plTreasuresList = $;

      Send(poChest,@Delete);
      Send(poLever,@Delete);

      propagate;
   }

   LeaveHold(what = $)
   {
      if what = poChest
      {
         poChest = $;
      }
      else if what = poLever
      {
         poLever = $;
      }

      propagate;
   }

   OpenDoor()
   {
      ptDoor1 = $;

      Send(self,@SetSector,#sector=DOOR1SECTOR,#animation=ANIMATE_FLOOR_LIFT,
           #height = 632,#speed=16);
      Send(self,@SomethingWaveRoom,#wave_rsc=RatKingLair_door_sound,
            #what=poLever);
      Send(poLever,@SetStuck,#newstuck=FALSE);

      return;
   }

   CloseDoor()
   {
      ptDoor2 = $;

      Send(self,@SetSector,#sector=DOOR2SECTOR,#animation=ANIMATE_FLOOR_LIFT,
           #height = 712,#speed=16);
      Send(self,@SomethingWaveRoom,#wave_rsc=RatKingLair_door_sound,
            #what=poLever);

      return;
   }

   DoTreasure()
   {
      local iItemNumber, iChance, iCumulative, i, oObject, oItemAtt, iLen;

      // Chance of extra treasure if players kill the
      // dusk rat minions before the boss.
      if piMinionsKilled < 3
      {
         iItemNumber = 1;
      }
      else if piMinionsKilled < 6
      {
         iItemNumber = Random(1,2);
      }
      else
      {
         iItemNumber = Random(1,3);
      }

      piMinionsKilled = 0;

      for (; iItemNumber > 0; --iItemNumber)
      {
         iChance = Random(1,100);
         iLen = Length(plTreasuresList);

         for (i = 1, iCumulative = 0; iCumulative < 100 AND i <= ilen; ++i)
         {
            iCumulative += First(Nth(plTreasuresList,i));
            if iChance <= iCumulative
            {
               if Nth(Nth(plTreasuresList,i),2) = TREASURE_OBJECT
               {
                  // Create Object.
                  oObject = Create(Nth(Nth(plTreasuresList,i),3),
                                   #number=Nth(Nth(plTreasuresList,i),4));
                  // Put in chest.
                  Send(poChest,@NewHold,#what=oObject);
               }
               else if Nth(Nth(plTreasuresList,i),2) = TREASURE_SPECIAL
               {
                     // Create item.
                     oObject = Create(Nth(Nth(plTreasuresList,i),3));
                     // Find Itematt.
                     oItemAtt = Send(SYS,@FindItemAttByNum,
                                     #num=Nth(Nth(plTreasuresList,i),4));
                     // Apply Itematt.
                     Send(oItemAtt,@AddToItem,#oItem=oObject);
                     // Put in chest.
                     Send(poChest,@NewHold,#what=oObject);
               }
               else if Nth(Nth(plTreasuresList,i),2) = TREASURE_POWER
               {
                  // Create item.
                  oObject = Create(Nth(Nth(plTreasuresList,i),3));
                  // Find Itematt.
                  oItemAtt = Send(SYS,@FindItemAttByNum,
                                  #num=Nth(Nth(plTreasuresList,i),4));
                  // Apply Itematt and randomize power.
                  Send(oItemAtt,@AddToItem,#oItem=oObject,#iPower=Random(2,7));
                  // Put in chest.
                  Send(poChest,@NewHold,#what=oObject);
               }

               iCumulative = 100;
            }
         }
      }

      return;
   }

   ResetTreasureList()
   {
      // All chances (first number) should add up to 100.
      plTreasuresList = [ [ 2, TREASURE_OBJECT, &ScaleArmor, 1 ],
                          [ 2, TREASURE_OBJECT, &DiscipleRobe, 1 ],
                          [ 2, TREASURE_OBJECT, &ChainArmor, 1 ],
                          [ 1, TREASURE_OBJECT, &PlateArmor, 1 ],
                          [ 2, TREASURE_OBJECT, &Circlet, 1 ],
                          [ 2, TREASURE_OBJECT, &Lute, 1 ],
                          [ 2, TREASURE_OBJECT, &MysticSword, 1 ],
                          [ 1, TREASURE_OBJECT, &BlindWand, 1 ],
                          [ 1, TREASURE_SPECIAL, &Hammer, WA_BLINDER ],
                          [ 1, TREASURE_SPECIAL, &Hammer, WA_PARALYZER ],
                          [ 1, TREASURE_SPECIAL, &Axe, WA_BLINDER ],
                          [ 1, TREASURE_SPECIAL, &Axe, WA_PARALYZER ],
                          [ 1, TREASURE_SPECIAL, &PlateArmor, IA_DURABLE ],
                          [ 1, TREASURE_SPECIAL, &Hammer, WA_SIPHON ],
                          [ 1, TREASURE_SPECIAL, &LongSword, WA_SIPHON ],
                          [ 1, TREASURE_POWER, &Hammer, WA_PUNISHER ],
                          [ 1, TREASURE_POWER, &Axe, WA_PUNISHER ],
                          [ 1, TREASURE_POWER, &LongSword, WA_PUNISHER ],
                          [ 1, TREASURE_POWER, &Hammer, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &Axe, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &Scimitar, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &LongSword, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &MetalShield, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &GoldShield, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &Knightshield, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &PlateArmor, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &ScaleArmor, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &ChainArmor, IA_XP_KILL_BONUS ],
                          [ 1, TREASURE_POWER, &LeatherArmor, IA_XP_KILL_BONUS ],
                          [ 2, TREASURE_POWER, &Gauntlet, IA_XP_KILL_BONUS ],
                          [ 7, TREASURE_OBJECT, &PurpleMushroom, 25 ],
                          [ 7, TREASURE_OBJECT, &InkyCap, 15 ],
                          [ 7, TREASURE_OBJECT, &OrcTooth, 25 ],
                          [ 7, TREASURE_OBJECT, &Diamond, 35 ],
                          [ 7, TREASURE_OBJECT, &BlueDragonScale, 15 ],
                          [ 7, TREASURE_OBJECT, &DarkAngelFeather, 15 ],
                          [ 7, TREASURE_OBJECT, &EntrootBerry, 30 ],
                          [ 7, TREASURE_OBJECT, &Ruby, 25 ],
                          [ 7, TREASURE_OBJECT, &Shillings, 5000 ]
                        ];

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
