// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
DukeLoyaltyQuest is QuestTemplate
// Quest nodes 5, 6, 7.
// QNT_ID_DUKE_LOYALTY_ONE, QNT_ID_DUKE_LOYALTY_TWO, QNT_ID_DUKE_LOYALTY_THREE

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include dukeloyaltyqt.lkod

   // Quest description.
   dukeloyalty_icon_rsc = dukeneph.bgf
   dukeloyalty_name_rsc = "Prove Your Loyalty to the Duke!"
   dukeloyalty_desc_rsc = \
      "In a time of political unrest and intrigue, a subject's frequent displays "
      "of loyalty are a necessity to guarantee the good graces of their liege.  "
      "As a cost saving measure, the Duke has decided that the preferred method "
      "of showing one's devotion to his cause takes the form of collecting taxes "
      "from the residents of Tos, Cor Noth and Jasper.  "
      "Menial or not, failure to comply with the Duke's request will almost "
      "certainly call your loyalty into question and lead to a swift termination "
      "of your affiliation with the Duke's court."

   dukeloyalty_collect_rsc = \
      "Duke Akardius has commanded you to collect taxes from %s.  Return "
      "quickly with the full amount."

   dukeloyalty_return_rsc = \
      "Return to Duke Akardius and give him the %i shillings in taxes."

   dukeloyalty_completed = \
      "You have carried out the Duke's task, and remain in his favor."

   // Quest resources.
   duke_standard2_assign = \
      "Ah, %NAME, my loyal servant.  I require you to collect all taxes "
      "due from %NPC.  Return within the hour."
   duke_standard2_failure = \
      "Subject: Tax Collection\n"
      "I could not wait any longer, I have already sent another courier "
      "to collect my taxes."
   duke_standard2_trigger = "tax"
   duke_standard3_assign = \
      "Oh, yes, my tax money for the Duke...  Here it is, %INDEF_CARGO%CARGO."
   duke_standard3_success = "You have done well."
   duke_standard3_failure = \
      "Subject: Your membership in my faction has been revoked\n"
      "You have failed me.  I will not be so foolish as to rely on "
      "your service in the future."

classvars:

   vrIcon = dukeloyalty_icon_rsc
   vrName = dukeloyalty_name_rsc
   vrDesc = dukeloyalty_desc_rsc

   vrNodeTwo = dukeloyalty_collect_rsc
   vrNodeThree = dukeloyalty_return_rsc

   vrCompleted = dukeloyalty_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_DUKE_SERVICE

   viIcon_Animation_start = 1

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_FACTION_DUKE | Q_PLAYER_NOTTRIED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 1
   piSchedulePct = 100
   piTimeLimit = 3600 // 30 minutes.

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_DUKE_LOYALTY_ONE, QNT_ID_DUKE_LOYALTY_TWO,
                      QNT_ID_DUKE_LOYALTY_THREE];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_DUKE_LOYALTY_TWO, vrNodeTwo],
                          [QNT_ID_DUKE_LOYALTY_THREE, vrNodeThree] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #5 is 1st Duke Standard node, say "loyalty" to Duke
      // QNT_ID_DUKE_LOYALTY_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
            #cargolist=[ duke_standard1_trigger ],
            #quest_node_index=QNT_ID_DUKE_LOYALTY_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_DUKE_LOYALTY_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                              #iJob=MOB_ROLE_ROYALTY,#cNPC_class=&DukeLiege));
      }
      else
      {
         Debug("Error building QN: QNT_ID_DUKE_LOYALTY_ONE");
      }

      // Template #6 is 2nd Duke Standard node, say "tax" to an NPC
      // QNT_ID_DUKE_LOYALTY_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[ duke_standard2_trigger ],#timelimit=piTimeLimit,
               #quest_node_index=QNT_ID_DUKE_LOYALTY_TWO)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosTown)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothTown)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperTown)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#iJob=MOB_ROLE_BARD,
                           #cNPC_class=&Minstrel)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_DUKE_LOYALTY_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_DUKE_LOYALTY_TWO,
               #new_hint=duke_standard2_assign);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_DUKE_LOYALTY_TWO,
               #new_hint=duke_standard2_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_DUKE_LOYALTY_TWO");
      }

      // Template #7 is 3rd Duke Standard node, bring tax $$ back to Duke
      // QNT_ID_DUKE_LOYALTY_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEMCLASS,
            #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 1 ],\
                         [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 2 ],\
                         [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 3 ],\
                         [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 4 ],\
                         [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5 ] ],
            #prizelist=[ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_UPDATE ] ],
            #penaltylist=[[[ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_NEUTRAL ]]],
            #timelimit=piTimeLimit,#quest_node_index=QNT_ID_DUKE_LOYALTY_THREE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_DUKE_LOYALTY_THREE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                      #iJob=MOB_ROLE_ROYALTY,#cNPC_class=&DukeLiege));
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_DUKE_LOYALTY_THREE,
               #new_hint=duke_standard3_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_DUKE_LOYALTY_THREE,
               #new_hint=duke_standard3_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_DUKE_LOYALTY_THREE,
               #new_hint=duke_standard3_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_DUKE_LOYALTY_THREE");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oCargo;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      // Quest node QNT_ID_DUKE_LOYALTY_TWO dialog needs the NPC name.
      if index = QNT_ID_DUKE_LOYALTY_TWO
      {
         AddPacket(4,Send(Send(oQuestNode,@GetDestNPC),@GetName));

         return;
      }

      // Quest node QNT_ID_DUKE_LOYALTY_THREE dialog needs the tax amount.
      if index = QNT_ID_DUKE_LOYALTY_THREE
      {
         oCargo = Send(oQuestNode,@GetCargo);
         AddPacket(4,Send(oCargo,@GetNumber));

         return;
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
