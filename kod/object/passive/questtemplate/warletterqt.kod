// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
WarLetterQuest is QuestTemplate
// Quest template QST_ID_WARLETTER = 57.
// Quest nodes 174, 175.
// QNT_ID_WARLETTER_ONE, QNT_ID_WARLETTER_TWO

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include warletterqt.lkod

   // Quest description.
   warletterqt_icon_rsc = scr01.bgf
   warletterqt_name_rsc = "Important Correspondence"
   warletterqt_desc_rsc = \
      "%s has a very important letter that must be delivered by a trusted "
      "adventurer.  If you are willing to carry out this task, you will be "
      "rewarded upon delivery."

   warletterqt_nodetwo_rsc = \
      "%s%s has asked you to deliver a letter to %s%s.  You have been told "
      "that it might be dangerous to transport this letter, but you will be "
      "rewarded for its delivery."

   warletterqt_completed_rsc = \
      "You have delivered an important letter, and have been rewarded for "
      "your troubles."

   // Quest resources.
   warletter_trigger1 = "need a courier"
   warletter_assign = \
      "Ah, yes!  I have just written this letter to %NPC.  Please deliver it "
      "to %HIMHER_NPC.  I suggest you hire a guard because it may be "
      "dangerous.  I'm sure the reward will be enough for you and a guard."
   warletter_success = \
      "Why, thank you!  I wasn't expecting a letter from %SOURCE_NPC, but "
      "it is welcomed.  Please take this as a token of my appreciation."
   warletter_failure = \
      "Subject: My letter?\n"
      "I have heard from a reliable source that you not only did you fail "
      "to deliver my letter, but that you opened it and read it!  How dare "
      "you!  Next time I'll report you to the Justicar."

classvars:

   vricon = warletterqt_icon_rsc
   vrName = warletterqt_name_rsc
   vrDesc = warletterqt_desc_rsc

   vrNodeTwo = warletterqt_nodetwo_rsc

   vrCompleted = warletterqt_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_WARLETTER

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE
   plSpecialRestrict = $
   piMaxPlayers = 20
   piSchedulePct = 100

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_WARLETTER_ONE,QNT_ID_WARLETTER_TWO];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_WARLETTER_TWO, vrNodeTwo] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #174 is the warletter quest
      // QNT_ID_WARLETTER_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
            #cargolist=[ warletter_trigger1 ],#quest_node_index=QNT_ID_WARLETTER_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&RebelLiege)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&OneCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TwoCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&ThreeCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&fourCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&FiveCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueVaultman)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperBanker)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosBanker)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosInnkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothInnkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_WARLETTER_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_WARLETTER_ONE");
      }

      // Template #175 is warletter quest
      // QNT_ID_WARLETTER_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEM,
               #NPC_modifier=QN_NPCMOD_DIFFERENT,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &WarLetter, 1 ] ],
               #prizelist=[ [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 6000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 7000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Circlet, 1 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &VampireWand, 1 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 5 ] ],
                            [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 6000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 7000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Circlet, 1 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Gauntlet, 1 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 5 ] ] ],
               #timelimit=3 * 3600,#quest_node_index=QNT_ID_WARLETTER_TWO)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&RebelLiege)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&OneCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TwoCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&ThreeCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&fourCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&FiveCouncilor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueVaultman)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperBanker)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosBanker)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&TosInnkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothInnkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_WARLETTER_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_WARLETTER_TWO,
               #new_hint=warletter_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_WARLETTER_TWO,
               #new_hint=warletter_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_WARLETTER_TWO,
               #new_hint=warletter_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_WARLETTER_TWO");
      }

      return;
   }

   ShowQuestUIDescRsc(who = $, oNPC = $)
   {
      local rName;

      if (oNPC = $)
      {
         Debug("Missing NPC while building quest UI description!");
         rName = system_blank_resource;
      }
      else
      {
         rName = Send(oNPC,@GetName);
      }

      AddPacket(4,vrDesc, 4,rName);

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oDestNPC, oSourceNPC;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      oDestNPC = Send(oQuestNode,@GetDestNPC);

      if index = QNT_ID_WARLETTER_TWO
      {
         oSourceNPC = Send(oQuestNode,@GetSourceNPC);
         oDestNPC = Send(oQuestNode,@GetDestNPC);

         AddPacket(4,Send(oSourceNPC,@GetCapDef), 4,Send(oSourceNPC,@GetName),
                   4,Send(oDestNPC,@GetDef), 4,Send(oDestNPC,@GetName));

         return;
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
