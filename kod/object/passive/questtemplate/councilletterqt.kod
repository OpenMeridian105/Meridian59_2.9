// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
CouncilLetterQuest is QuestTemplate
// Quest template QST_ID_COUNCIL_LETTER = 39.
// Quest nodes 124, 125.
// QNT_ID_COUNCIL_LETTER_ONE, QNT_ID_COUNCIL_LETTER_TWO

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include councilletterqt.lkod

   // Quest description.
   councilletterquest_icon_rsc = scr04.bgf
   councilletterquest_name_rsc = "An Urgent Message"
   councilletterquest_desc_rsc = \
      "%s has a vitally important letter that must be delivered to a member "
      "of the council.  You would be paid quite well for ensuring it was "
      "delivered in a timely manner."

   councilletterquest_deliver_rsc = \
      "%s%s has asked you to deliver an official letter to Councillor "
      "%s.  You will be paid upon delivery of the letter."

   councilletterquest_completed_rsc = \
      "You have successfully delivered an important letter to the Council."

   // Quest resources.
   council_letter_assign = \
      "Take this letter to the councillor %NPC as fast as "
      "possible.  He will pay you well for the service."
   council_letter_success = \
      "I’ve been expecting this letter.  Thank you, %NAME.  Here is your fee."
   council_letter_failure = \
      "Subject:  The letter I entrusted to you\n"
      "%NPC did not get my letter in time.  I shall find another "
      "courier in the future."

classvars:

   vrIcon = councilletterquest_icon_rsc
   vrName = councilletterquest_name_rsc
   vrDesc = councilletterquest_desc_rsc

   vrDeliver = councilletterquest_deliver_rsc
   vrCompleted = councilletterquest_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_COUNCIL_LETTER

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE
   plSpecialRestrict = $
   piMaxPlayers = 12
   piSchedulePct = 100

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_COUNCIL_LETTER_ONE,
                      QNT_ID_COUNCIL_LETTER_TWO];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_COUNCIL_LETTER_TWO, vrDeliver] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #124 is council letter quest
      // QNT_ID_COUNCIL_LETTER_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[ letter_trigger ],
               #quest_node_index=QNT_ID_COUNCIL_LETTER_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#iJob=MOB_ROLE_INNKEEPER)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_COUNCIL_LETTER_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_COUNCIL_LETTER_ONE");
      }

      // Template #125 is council letter quest
      // QNT_ID_COUNCIL_LETTER_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEM,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &CouncilLetter, 1 ] ],
               #prizelist=[ [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 7500 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 7500 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 10000 ] ] ],
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_COUNCIL_LETTER_TWO)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&Council)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_COUNCIL_LETTER_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_COUNCIL_LETTER_TWO,
               #new_hint=council_letter_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_COUNCIL_LETTER_TWO,
               #new_hint=council_letter_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_COUNCIL_LETTER_TWO,
               #new_hint=council_letter_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_COUNCIL_LETTER_TWO");
      }

      return;
   }

   ShowQuestUIDescRsc(who = $, oNPC = $)
   {
      local rName;

      if (oNPC = $)
      {
         Debug("Missing NPC while building quest UI description!");
         rName = system_blank_resource;
      }
      else
      {
         rName = Send(oNPC,@GetName);
      }

      AddPacket(4,vrDesc, 4,rName);

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oDestNPC, oSourceNPC;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      if index = QNT_ID_COUNCIL_LETTER_TWO
      {
         oSourceNPC = Send(oQuestNode,@GetSourceNPC);
         oDestNPC = Send(oQuestNode,@GetDestNPC);

         AddPacket(4,Send(oSourceNPC,@GetCapDef), 4,Send(oSourceNPC,@GetName),
                   4,Send(oDestNPC,@GetName));
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
