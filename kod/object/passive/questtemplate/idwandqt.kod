// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
IdentifyWandQuest is QuestTemplate
// Quest template QST_ID_WAND_ID = 59.
// Quest nodes 179, 180, 181.
// QNT_ID_WAND_ID_ONE, QNT_ID_WAND_ID_TWO, QNT_ID_WAND_ID_THREE

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include idwandqt.lkod

   // Quest description.
   idwandqt_icon_rsc = joltstaf.bgf
   idwandqt_name_rsc = "The Mysterious Wand"
   idwandqt_desc_rsc = \
      "%s recently received a wand they are unable to identify by magical "
      "means, and would like you to take it to an alchemical expert to "
      "determine its nature.  Returning the identified wand would net you "
      "a small reward."

   idwandqt_nodetwo_rsc = \
      "%s%s recently received a wand %s is unable to identify by magical "
      "means, and would like you to take it to an alchemical expert to "
      "determine its nature.  Offer the wand to %s%s and see if %s can "
      "help with this task."

   idwandqt_nodethree_rsc = \
      "%s%s has determined the nature of the wand. Go back to %s%s and "
      "offer %s the now identified wand, and collect your reward."

   idwandqt_completed_rsc = \
      "You have helped identify a mysterious wand for a small reward."

   // Quest resources.
   wand_identify_assign_1 =\
      "Well, now that you mention it, I do have this wand I picked up the "
      "other day but I can't figure out what it does - it seems to repel "
      "magic.  Could you take it to %NPC and have %HIMHER_NPC examine it "
      "for me?  I'd be most grateful if you could."
   wand_identify_assign_2 =\
      "A wand, eh?  Well let me see here... ah ha!  You see these runes "
      "here... along the handle...  Those say that this is a %CARGO.  Allow "
      "me to put a label with the translation on the wand so that %NPC will "
      "be able to know what this is."
   wand_identify_success = \
      "Marvellous.  A %CARGO will certainly come in handy.  Let me give "
      "you something for your trouble."
   wand_identify_failure_1 = \
      "Subject: That odd wand\n"
      "About that wand, I remembered that it was a pretty useless item.  "
      "Don't bother identifying it, I'm sure it is not worth it.  I will "
      "probably have other odd jobs for you to run should you come back to "
      "visit in the future.  See you later!"
   wand_identify_failure_2 = \
      "Subject: That odd wand\n"
      "About that wand, %NPC told me that it wasn't important anyway.  "
      "Actually, if I were you, I would throw it away.  Although I could "
      "tell what it was, it didn't look like it would work properly."

classvars:

   vrIcon = idwandqt_icon_rsc
   vrName = idwandqt_name_rsc
   vrDesc = idwandqt_desc_rsc

   vrNodeTwo = idwandqt_nodetwo_rsc
   vrNodeThree = idwandqt_nodethree_rsc

   vrCompleted = idwandqt_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_WAND_ID

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NEWBIE | Q_PLAYER_NOTTRIED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 15
   piSchedulePct = 100

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_WAND_ID_ONE, QNT_ID_WAND_ID_TWO,
                      QNT_ID_WAND_ID_THREE];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_WAND_ID_TWO, vrNodeTwo],
                          [QNT_ID_WAND_ID_THREE, vrNodeThree] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #179 is wand ID quest kickoff, "need a courier"
      // QNT_ID_WAND_ID_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[ letter_trigger ],
               #quest_node_index=QNT_ID_WAND_ID_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueInnkeeper)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&Barloquetailor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CornothGrocer)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&MarionBlacksmith)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&MarionElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_WAND_ID_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_WAND_ID_ONE");
      }

      // Template #180 is wand ID quest, deliver the mystery potion
      // QNT_ID_WAND_ID_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEM,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &MysteryWand, 1 ] ],
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_WAND_ID_TWO)
      {
         lNPCs = $;
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&TosApothecary)),lNPCs);
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_WAND_ID_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_WAND_ID_TWO,
               #new_hint=wand_identify_assign_1);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_WAND_ID_TWO,
               #new_hint=wand_identify_failure_1);
      }
      else
      {
         Debug("Error building QN: QNT_ID_WAND_ID_TWO");
      }

      // Template #181 is wand ID quest, come back and give the labeled potion
      // QNT_ID_WAND_ID_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEM,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &LabeledWand, 1 ] ],
               #prizelist=[ [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 5000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 8000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 8 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Cheese, 6 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &GoldShield, 1 ] ] ],
               #timelimit=3 * 3600,#quest_node_index=QNT_ID_WAND_ID_THREE)
      {
         Send(oQE,@SetQuestNodeNPCModifier,#index=QNT_ID_WAND_ID_THREE,
               #new_mod=QN_NPCMOD_PREVIOUS);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_WAND_ID_THREE,
               #new_hint=wand_identify_assign_2);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_WAND_ID_THREE,
               #new_hint=wand_identify_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_WAND_ID_THREE,
               #new_hint=wand_identify_failure_2);
      }
      else
      {
         Debug("Error building QN: QNT_ID_WAND_ID_THREE");
      }

      return;
   }

   ShowQuestUIDescRsc(who = $, oNPC = $)
   {
      local rName;

      if (oNPC = $)
      {
         Debug("Missing NPC while building quest UI description!");
         rName = system_blank_resource;
      }
      else
      {
         rName = Send(oNPC,@GetName);
      }

      AddPacket(4,vrDesc, 4,rName);

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oDestNPC, oSourceNPC;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      oDestNPC = Send(oQuestNode,@GetDestNPC);
      oSourceNPC = Send(oQuestNode,@GetSourceNPC);

      if index = QNT_ID_WAND_ID_TWO
      {
         AddPacket(4,Send(oSourceNPC,@GetCapDef), 4,Send(oSourceNPC,@GetName),
                   4,Send(oDestNPC,@GetHeShe), 4,Send(oDestNPC,@GetDef),
                   4,Send(oDestNPC,@GetName), 4,Send(oDestNPC,@GetHeShe));
      }

      if index = QNT_ID_WAND_ID_THREE
      {
         AddPacket(4,Send(oSourceNPC,@GetCapDef), 4,Send(oSourceNPC,@GetName),
                   4,Send(oDestNPC,@GetDef), 4,Send(oDestNPC,@GetName),
                   4,Send(oDestNPC,@GetHimHer));
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
