// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
ChessMoveQuest is ChessQuestTemplate
// Quest template QST_ID_CHESS = 40.
// Quest nodes 126, 127, 128, 129.
// QNT_ID_CHESS_QUEST_ONE, QNT_ID_CHESS_QUEST_TWO, QNT_ID_CHESS_QUEST_THREE
// QNT_ID_CHESS_QUEST_FOUR

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include chessmoveqt.lkod

   // Quest description.
   chessmovequest_name_rsc = "In Need of a Pawn"

   chessmovequest_completed_rsc = \
      "You have generously helped courier a chess move between distant "
      "participants."

   // Quest resources.
   chess_success_4 = \
      "Very clever!  I'll have to think a bit before I respond.  Thank "
      "you for helping us conduct our game, here's a little something "
      "for your trouble."

classvars:

   vrName = chessmovequest_name_rsc

   vrCompleted = chessmovequest_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_CHESS

properties:

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_CHESS_QUEST_ONE, QNT_ID_CHESS_QUEST_TWO,
                      QNT_ID_CHESS_QUEST_THREE, QNT_ID_CHESS_QUEST_FOUR];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_CHESS_QUEST_TWO, vrNodeTwo],
                          [QNT_ID_CHESS_QUEST_THREE, vrNodeThree],
                          [QNT_ID_CHESS_QUEST_FOUR, vrNodeFour] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib, oNPC;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #126 is chess quest
      // QNT_ID_CHESS_QUEST_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP,
               #quest_node_index=QNT_ID_CHESS_QUEST_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&Council)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&PrincessLiege)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueApothecary)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueClerk)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothTailor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothSergeant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&MarionHealer)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_CHESS_QUEST_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_QUEST_ONE");
      }

      // Template #127 is chess quest
      // QNT_ID_CHESS_QUEST_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #NPC_modifier=QN_NPCMOD_SAME,#cargolist=[chess_trigger],
               #timelimit=2 * 60,#quest_node_index=QNT_ID_CHESS_QUEST_TWO)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_QUEST_TWO,
               #new_hint=chess_assign_2);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_QUEST_TWO");
      }

      // Template #128 is chess quest
      // QNT_ID_CHESS_QUEST_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_CHESSMOVE,
               #NPC_modifier=QN_NPCMOD_DIFFERENT,
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_CHESS_QUEST_THREE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_CHESS_QUEST_THREE,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_QUEST_THREE,
               #new_hint=chess_assign_3);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_CHESS_QUEST_THREE,
               #new_hint=chess_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_QUEST_THREE");
      }

      // Template #129 is chess quest
      // QNT_ID_CHESS_QUEST_FOUR
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_CHESSMOVE,
               #NPC_modifier=QN_NPCMOD_PREVIOUS,
               #prizelist=[ [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 8000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 8500 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 9000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 10000 ] ] ],
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_CHESS_QUEST_FOUR)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_QUEST_FOUR,
               #new_hint=chess_assign_4);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_CHESS_QUEST_FOUR,
               #new_hint=chess_success_4);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_CHESS_QUEST_FOUR,
               #new_hint=chess_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_QUEST_FOUR");
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
