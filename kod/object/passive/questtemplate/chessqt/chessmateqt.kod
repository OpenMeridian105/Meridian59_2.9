// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
ChessMateQuest is ChessQuestTemplate
// Quest template QST_ID_CHESS_CHECKMATE = 41.
// Quest nodes 130, 131, 132, 133, 134.
// QNT_ID_CHESS_CHECKMATE_ONE, QNT_ID_CHESS_CHECKMATE_TWO,
// QNT_ID_CHESS_CHECKMATE_THREE, QNT_ID_CHESS_CHECKMATE_FOUR,
// QNT_ID_CHESS_CHECKMATE_FIVE

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include chessmateqt.lkod

   // Quest description.
   chessmatequest_name_rsc = "In Need of a Pawn"

   chessmatequest_nodefive_rsc = \
      "%s%s has fallen into %s%s's trap!  Go and tell %s that %s%s's next "
      "move is \"%q\"."

   chessmatequest_completed_rsc = \
      "You have generously helped courier a chess move, and helped the "
      "players finish a game!"

   // Quest resources.
   chess_checkmate_assign_5 = \
      "Ha!  %NPC fell right into my trap!  Tell %HIMHER_NPC that my next "
      "move is %CARGO.  Oh, and tell %HIMHER_NPC that's checkmate."
   chess_checkmate_success_5 = \
      "Oh.  Yes, I should have seen that.  Ah, well.  Thank you for "
      "serving as our courier.  By the terms of my agreement with "
      "%SOURCE_NPC, I must cover the courier fees for the game.  Please "
      "take this as a reward for your trouble."

classvars:

   vrName = chessmatequest_name_rsc

   vrNodeFive = chessmatequest_nodefive_rsc

   vrCompleted = chessmatequest_completed_rsc

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_CHESS_CHECKMATE

properties:

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_CHESS_CHECKMATE_ONE, QNT_ID_CHESS_CHECKMATE_TWO,
                      QNT_ID_CHESS_CHECKMATE_THREE, QNT_ID_CHESS_CHECKMATE_FOUR,
                      QNT_ID_CHESS_CHECKMATE_FIVE];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_CHESS_CHECKMATE_TWO, vrNodeTwo],
                          [QNT_ID_CHESS_CHECKMATE_THREE, vrNodeThree],
                          [QNT_ID_CHESS_CHECKMATE_FOUR, vrNodeFour],
                          [QNT_ID_CHESS_CHECKMATE_FIVE, vrNodeFive] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib, oNPC;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #130 is chess checkmate quest
      // QNT_ID_CHESS_CHECKMATE_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP,
               #quest_node_index=QNT_ID_CHESS_CHECKMATE_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&Council)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&PrincessLiege)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueApothecary)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueClerk)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothTailor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothSergeant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&JasperElder)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&MarionHealer)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_CHESS_CHECKMATE_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_CHECKMATE_ONE");
      }

      // Template #131 is chess checkmate quest
      // QNT_ID_CHESS_CHECKMATE_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #NPC_modifier=QN_NPCMOD_SAME,#cargolist=[chess_trigger],
               #timelimit=2 * 60,#quest_node_index=QNT_ID_CHESS_CHECKMATE_TWO)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_CHECKMATE_TWO,
               #new_hint=chess_assign_2);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_CHECKMATE_TWO");
      }

      // Template #132 is chess checkmate quest
      // QNT_ID_CHESS_CHECKMATE_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_CHESSMOVE,
               #NPC_modifier=QN_NPCMOD_DIFFERENT,
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_CHESS_CHECKMATE_THREE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_CHESS_CHECKMATE_THREE,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_CHECKMATE_THREE,
               #new_hint=chess_assign_3);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_CHESS_CHECKMATE_THREE,
               #new_hint=chess_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_CHECKMATE_THREE");
      }

      // Template #133 is chess checkmate quest
      // QNT_ID_CHESS_CHECKMATE_FOUR
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_CHESSMOVE,
               #NPC_modifier=QN_NPCMOD_PREVIOUS,
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_CHESS_CHECKMATE_FOUR)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_CHECKMATE_FOUR,
               #new_hint=chess_assign_4);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_CHESS_CHECKMATE_FOUR,
               #new_hint=chess_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_CHECKMATE_FOUR");
      }

      // Template #134 is chess checkmate quest
      // QNT_ID_CHESS_CHECKMATE_FIVE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_CHESSMOVE,
               #NPC_modifier=QN_NPCMOD_PREVIOUS,
               #prizelist=[ [ [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 8000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 8500 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 9000 ],
                              [ QN_PRIZETYPE_ITEMCLASS, &Shillings, 10000 ] ] ],
               #timelimit=6 * 3600,#quest_node_index=QNT_ID_CHESS_CHECKMATE_FIVE)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_CHESS_CHECKMATE_FIVE,
               #new_hint=chess_checkmate_assign_5);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_CHESS_CHECKMATE_FIVE,
               #new_hint=chess_checkmate_success_5);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_CHESS_CHECKMATE_FIVE,
               #new_hint=chess_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_CHESS_CHECKMATE_FIVE");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oDestNPC, oSourceNPC, oCargo;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      if index = QNT_ID_CHESS_CHECKMATE_FIVE
      {
         oSourceNPC = Send(oQuestNode,@GetSourceNPC);
         oCargo = Send(oQuestNode,@GetCargo);
         oDestNPC = Send(oQuestNode,@GetDestNPC);

         AddPacket(4,Send(oDestNPC,@GetCapDef), 4,Send(oDestNPC,@GetName),
                   4,Send(oSourceNPC,@GetDef), 4,Send(oSourceNPC,@GetName),
                   4,Send(oDestNPC,@GetHimHer),4,Send(oSourceNPC,@GetDef),
                   4,Send(oSourceNPC,@GetName), 4,oCargo);

         return;
      }

      propagate;
   }

end
/////////////////////////////////////////////////////////////////////////////////
