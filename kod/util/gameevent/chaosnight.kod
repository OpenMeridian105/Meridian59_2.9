// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ChaosNight is GameEvent

// Handles a chaos night, or "frenzy".  This is a mode where combat is encouraged
// and people can kill each other without permanent repercussions.  Generally the
// game is saved first, and restored afterwards.  This can't be done from Blakod
// so a frenzy requires manual intervention.

constants:

   include blakston.khd
   include protocol.khd

resources:

   include chaosnight.lkod

   chaos_night_rsc = \
      "~B~U~k[###]~n ~B~rTHE REIGN OF BLOOD FRENZY~n:  The fabric of reality shakes as "
      "an evil presence attempts to penetrate the Meridian.  The servants of "
      "Qor sing out in cacophonic glee as anarchy sweeps across the land. "
      "With no Guardian Angels present, anything goes as long as the sky "
      "boils red.\n"
      "[Your character has been saved and will be restored after the Frenzy.]"
   chaos_night_admin_rsc = \
       "~B~U~k[###]~n ~B~bADMINISTRATOR~n: To end the 'Reign of Blood Frenzy,' "
       "you should make a copy of the LASTSAVE.TXT file (on the server "
       "machine) now. When the Frenzy is to end, shut down the server and "
       "restore the LASTSAVE.TXT."
   end_chaos_night_rsc = \
       "~B~U~k[###]~n ~B~gTHE REIGN OF BLOOD FRENZY~n: The game was not restored "
       "properly!  The 'Reign of Blood Frenzy' ~Imust~n be ended by restoring "
       "LASTSAVE.TXT at the server.  Otherwise, character status may be "
       "corrupted due to the Frenzy."
   chaos_night_npcs_rsc = \
      "~B~U~k[###]~n ~B~rThe Innkeepers in each city have been preparing for "
      "this day, and have stockpiled massive quantities of items useful for "
      "defending their homes!  To outfit yourself for the coming battles, "
      "go to your nearest Innkeeper and check what they have for sale.  For "
      "a price, they may part with some much needed supplies."
   chaos_gift = \
      "~B~U~k[###]~n ~B~vQor grants you %s%s to smite your enemies!"

   chaos_kill_header = "Kill scoreboard:"
   chaos_death_header = "Death scoreboard:"
   chaos_kill_header_color = "~B~rKill scoreboard:"
   chaos_death_header_color = "~B~rDeath scoreboard:"
   chaos_score_1_kill = "~b%q~n has ~B1~B kill."
   chaos_score_n_kills = "~b%q~n has ~B%i~B kills."
   chaos_score_1_death = "~b%q~n has ~B1~B death."
   chaos_score_n_deaths = "~b%q~n has ~B%i~B deaths."
   chaos_score_has = " has "
   chaos_score_kill = " kill."
   chaos_score_kills = " kills."
   chaos_score_death = " death."
   chaos_score_deaths = " deaths."

   chaos_wav = chaosup.ogg

classvars:

properties:

   // Timer for when the frenzy will end.
   ptChaosNightEnd = $

   plChaosNightLoot = $
   ptChaosNightLootTimer = $
   piChaosNightLootTimerIntervalMs = 3 * 60 * 1000

   // Is loot given to all players?
   pbGiveGlobalLoot = FALSE

   // Do we hand out reagents with loot?
   pbGiveReagents = FALSE

   // Do we have Innkeepers sell frenzy loot?
   pbSellFrenzyLoot = TRUE
   
   // If we hand out shillings during frenzy, how much do we give at one time?
   piFrenzyMoneyAmount = 200000

   // Keep score of all frenzy kills and deaths so we can print them
   // to log when frenzy is finished.
   plFrenzyKills = $
   plFrenzyDeaths = $

messages:

   Constructor()
   {
      propagate;
   }

   Delete()
   {
      local i;

      if ptChaosNightLootTimer <> $
      {
         DeleteTimer(ptChaosNightLootTimer);
         ptChaosNightLootTimer = $;
      }

      // Tell the rooms to change their flags back to normal, and to
      // redraw the correct background.
      foreach i in Send(SYS, @GetRooms)
      {
         // Sets all rooms to use reagents.
         Send(i,@TurnReagentsOn);

         if NOT Send(i,@CheckRoomFlag,#flag=ROOM_HOMETOWN)
         {
            Send(i,@EndChaosNight);
         }
      }

      // Only Send this message to DMs and up, since this message should
      // never be seen.
      foreach i in Send(SYS,@GetUsersLoggedOn)
      {
         if IsClass(i,&DM)
         {
            Send(i,@MsgSendUser,#message_rsc=end_chaos_night_rsc);
         }
      }

      // Set NPCs back to selling the correct items.
      Send(self,@UnsetFrenzyNPCSellers);

      // Delete score lists.
      plFrenzyKills = $;
      plFrenzyDeaths = $;

      return;
   }

   StartEvent(parm2=$,parm3=$)
   {
      local i,millis,sMessage;
      
      sMessage = SetString($,@NotifyEngineEndEvent);
      
      if (parm2 <> $ AND parm3 <> $)
      {
         switch(parm3)
         {
            case GAMEEVENT_SCALE_SECONDS:
               millis = parm2 * 1000;
               ptChaosNightEnd = CreateTimer(self,@EndChaosNightTimer,millis);
               break;

            case GAMEEVENT_SCALE_MINUTES:
               Send(REALTIME_OBJECT,@RegisterCallbackInMinutes,
                     #oObject=self,
                     #minutes=parm2,
                     #message=sMessage);
               break;
               
            case GAMEEVENT_SCALE_HOURS:
               Send(REALTIME_OBJECT,@RegisterCallbackInHours,
                     #oObject=self,
                     #hours=parm2,
                     #message=sMessage);
               break;
            
            case GAMEEVENT_SCALE_DAYS:
               Send(REALTIME_OBJECT,@RegisterCallbackInDays,
                     #oObject=self,
                     #days=parm2,
                     #message=sMessage);
               break;
            
            case GAMEEVENT_SCALE_WEEKS:
               //Send(REALTIME_OBJECT,@RegisterCallbackInWeeks,
               //      #oObject=self,
               //      #weeks=parm2,
               //      #message=sMessage);
               Debug("GAMEEVENT_SCALE_WEEKS not implemented, event ending in 2 hours");
               ptChaosNightEnd = CreateTimer(self,@EndChaosNightTimer,3600000);
               break;
            
            case GAMEEVENT_SCALE_MONTHS:
               Send(REALTIME_OBJECT,@RegisterCallbackInMonths,
                     #oObject=self,
                     #months=parm2,
                     #message=sMessage);
               break;
            
            case GAMEEVENT_SCALE_YEARS:
               Send(REALTIME_OBJECT,@RegisterCallbackInYears,
                     #oObject=self,
                     #years=parm2,
                     #message=sMessage);
               break;
            
            default:
               ptChaosNightEnd = CreateTimer(self,@EndChaosNightTimer,3600000);
               break;
         }
      }
      
      foreach i in Send(SYS,@GetRooms)
      {
         // Sets all rooms to no reagent use.
         Send(i,@TurnReagentsOff);

         // Make all rooms except for inns kill zones (anyone can die).
         // Also, change the background graphic.
         if NOT Send(i,@CheckRoomFlag,#flag=ROOM_HOMETOWN)
         {
            Send(i,@StartChaosNight);
         }
      }

      // Set up a timer to give everyone some reagents, etc.
      Send(self,@ChaosNightPeriodicLoot);

      // Give Innkeepers a list of frenzy loot to sell to players.
      if pbSellFrenzyLoot
      {
         Post(self,@SetFrenzyNPCSellers);
      }

      // Tell the users online what's going on.
      foreach i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@MsgSendUser,#message_rsc=chaos_night_rsc);
         Send(i,@WaveSendUser,#wave_rsc=chaos_wav);

         if IsClass(i,&Admin)
         {
            Send(i,@MsgSendUser,#message_rsc=chaos_night_admin_rsc);
         }

         if pbSellFrenzyLoot
         {
            Send(i,@MsgSendUser,#message_rsc=chaos_night_npcs_rsc);
         }
      }
      
      return event_success_rsc;
   }
   
   EndEvent()
   {
      return Send(self,@EndChaosNight);
   }
   
   EndChaosNightTimer()
   {
      // Print scores to GodLog before exiting.
      Send(self,@LogScores);

      ptChaosNightEnd = $;
      Send(self,@NotifyEngineEndEvent);

      return;
   }

   EndChaosNight()
   {
      if ptChaosNightEnd <> $
      {
         DeleteTimer(ptChaosNightEnd);
         ptChaosNightEnd = $;
      }

      // Print scores to GodLog before exiting.
      Send(self,@LogScores);

      return event_success_rsc;
   }
   
   UserLogon(who = $)
   {
      Send(who,@MsgSendUser,#message_rsc=chaos_night_rsc);
      Send(who,@WaveSendUser,#wave_rsc=chaos_wav);

      if pbSellFrenzyLoot
      {
         Send(who,@MsgSendUser,#message_rsc=chaos_night_npcs_rsc);
      }

      return;
   }

   SetFrenzyNPCSellers()
   "Sets Innkeepers to sell frenzy loot."
   {
      Send(&JasperInnKeeper,@SetForSaleFrenzy);
      Send(&MarionInnkeeper,@SetForSaleFrenzy);
      Send(&CorNothInnkeeper,@SetForSaleFrenzy);
      Send(&BarloqueInnkeeper,@SetForSaleFrenzy);
      Send(&TosInnKeeper,@SetForSaleFrenzy);
      Send(&RazaInnKeeper,@SetForSaleFrenzy);
      Send(&KocatanInnkeeper,@SetForSaleFrenzy);

      return;
   }

   UnsetFrenzyNPCSellers()
   "If the Innkeepers need to be set back to selling the correct items."
   {
      Send(&JasperInnKeeper,@SetForSale);
      Send(&MarionInnkeeper,@SetForSale);
      Send(&CorNothInnkeeper,@SetForSale);
      Send(&BarloqueInnkeeper,@SetForSale);
      Send(&TosInnKeeper,@SetForSale);
      Send(&RazaInnKeeper,@SetForSale);
      Send(&KocatanInnkeeper,@SetForSale);

      return;
   }

   ChaosNightLoot(iNumCasts=100)
   "Distributes a bunch of loot for Frenzies."
   {
      local oPlayer, lGiveList, oItem, oGift;

      // Reset the loot list if it's niled out.
      if plChaosNightLoot = $
      {
         plChaosNightLoot = [
                              Create(&KarmaPotion,#karma=10000),
                              Create(&KarmaPotion,#karma=-10000),
                              Create(&Chaosfood,#number=100),
                              Create(&Mint,#number=100),
                              Create(&Scimitar),
                              Create(&Longsword),
                              Create(&Longbow),
                              Create(&BattleBow),
                              Create(&BerserkerRing),
                              Create(&BerserkerRing),
                              Create(&Arrow,#number=150),
                              Create(&NeruditeArrow,#number=150),
                              Create(&JewelOfFroz),
                              Create(&JewelOfFroz),
                              Create(&Gift),
                              Create(&Gift),
                              Create(&NeruditeBow),
                              Create(&Platearmor),
                              Create(&Guildshield),
                              Create(&Mysticsword),
                              Create(&Scimitar),
                              Create(&Helm)
                            ];
      }

      lGivelist = Send(SYS,@GetUsersLoggedOn);

      foreach oPlayer in lGiveList
      {
         foreach oItem in plChaosNightLoot
         {
            if Send(oItem,@IsStackable)
            {
               oGift = Create(GetClass(oItem),#number=Send(oItem,@GetNumber));
            }

            if IsClass(oItem,&KarmaPotion)
            {
               oGift = Create(GetClass(oItem),#karma=Send(oItem,@GetKarma));
            }
            else
            {
               if NOT Send(oItem,@IsStackable)
               {
                  oGift = Create(GetClass(oItem));
               }
            }

            Send(oPlayer,@NewHold,#what=oGift);

            if Send(oPlayer,@IsLoggedOn)
            {
               Send(oPlayer,@MsgSendUser,#Message_rsc=chaos_gift,
                     #parm1=Send(oGift,@GetIndef),#parm2=Send(oGift,@GetName));
            }
         }

         // Reagent handouts turned off by default as reagent cost is now
         // disabled during frenzies via room flag pbNoReagents.
         if pbGiveReagents
         {
            Send(oPlayer,@AddReagentsForSpells,#iNumCasts=iNumCasts);
         }
      }

      return Send(SYS, @GetSuccessRsc);
   }

   ChaosNightMoney()
   "Hands out shillings to all players so they can buy from NPCs."
   {
      local lGivelist, oPlayer, oMoney;

      lGivelist = Send(SYS,@GetUsersLoggedOn);

      foreach oPlayer in lGiveList
      {
         oMoney = Create(&Shillings,#number=piFrenzyMoneyAmount);

         Send(oPlayer,@NewHold,#what=oMoney);

            if Send(oPlayer,@IsLoggedOn)
            {
               Send(oPlayer,@MsgSendUser,#Message_rsc=chaos_gift,
                     #parm1=Send(oMoney,@GetIndef),
                     #parm2=Send(oMoney,@GetName));
            }
      }

      return Send(SYS, @GetSuccessRsc);
   }

   ChaosNightPeriodicLoot()
   "Timer function that periodically gives people loot during a chaos night"
   {
      // Loot is now handled by updated sell lists on Innkeeper NPCs.
      // In case we still want to use the global loot handout, we keep
      // this timer active but control whether loot is distributed with
      // a setting.

      if pbGiveGlobalLoot
      {
         Send(self,@ChaosNightLoot);
      }

      // If NPCs are selling the loot, gotta give the players some cash.
      if pbSellFrenzyLoot
      {
         Send(self,@ChaosNightMoney);
      }

      ptChaosNightLootTimer = CreateTimer(self,@ChaosNightPeriodicLoot,
                                    piChaosNightLootTimerIntervalMs);

      return;
   }

   UserKilled(who=$,killer=$)
   {
      plFrenzyKills = Send(self,@AddToSortedList,#what=killer,
                           #lList=plFrenzyKills);
      plFrenzyDeaths = Send(self,@AddToSortedList,#what=who,
                           #lList=plFrenzyDeaths);

      propagate;
   }

   PrintScores()
   "Broadcasts names and kills/deaths for frenzy participants."
   {
      local i, iScore, sName;

      if (plFrenzyKills <> $)
      {
         // Score header.
         Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
               #string=chaos_kill_header_color);

         foreach i in plFrenzyKills
         {
            // Have to make a string, if the player logged off
            // other players might not have their dynamic resource.
            sName = SetString(sName,Send(First(i),@GetTrueName));
            iScore = Nth(i,2);

            if iScore = 1
            {
               Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
                     #string=chaos_score_1_kill,#parm1=sName);
            }
            else
            {
               Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
                     #string=chaos_score_n_kills,#parm1=sName,#parm2=iScore);
            }
         }
      }

      if (plFrenzyDeaths <> $)
      {
         // Score header.
         Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
               #string=chaos_death_header_color);

         foreach i in plFrenzyDeaths
         {
            // Have to make a string, if the player logged off
            // other players might not have their dynamic resource.
            sName = SetString(sName,Send(First(i),@GetTrueName));
            iScore = Nth(i,2);

            if iScore = 1
            {
               Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
                     #string=chaos_score_1_death,#parm1=sName);
            }
            else
            {
               Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
                     #string=chaos_score_n_deaths,#parm1=sName,#parm2=iScore);
            }
         }
      }

      return;
   }

   LogScores()
   "Prints scores to GodLog, so they can be accessed after reloading game."
   {
      local i, iScore;

      if (plFrenzyKills <> $)
      {
         // Score header.
         GodLog(chaos_kill_header);

         foreach i in plFrenzyKills
         {
            iScore = Nth(i,2);

            if (iScore = 1)
            {
               GodLog(Send(First(i),@GetTrueName),chaos_score_has, 1,
                  chaos_score_kill);
            }
            else
            {
               GodLog(Send(First(i),@GetTrueName),chaos_score_has, iScore,
                  chaos_score_kills);
            }
         }
      }

      if (plFrenzyDeaths <> $)
      {
         // Score header.
         GodLog(chaos_death_header);

         foreach i in plFrenzyDeaths
         {
            iScore = Nth(i,2);

            if (iScore = 1)
            {
               GodLog(Send(First(i),@GetTrueName),chaos_score_has, 1,
                  chaos_score_death);
            }
            else
            {
               GodLog(Send(First(i),@GetTrueName),chaos_score_has, iScore,
                  chaos_score_deaths);
            }
         }
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
